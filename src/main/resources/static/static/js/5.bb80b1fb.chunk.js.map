{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/Project/ProjectItem/ProjectItem.js","components/UI/CustomButtons/CreateProjectButton.js","container/Dashboard.js"],"names":["spinner","className","classes","Loader","module","exports","ProjectItem","props","project","projectIdentifier","projectName","description","to","onClick","window","confirm","delete","CreateProjectButton","Dashboard","this","onFetchProjects","projects","Spinner","loading","Fragment","map","key","id","onDeleteProject","history","Component","connect","state","errors","dispatch","actions"],"mappings":"oIAAA,sCAQeA,IAJC,kBACd,yBAAKC,UAAWC,IAAQC,QAAxB,gB,oBCJFC,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,yB,4HC6C5CC,EA3CK,SAACC,GAAW,IAAD,EAC2BA,EAAMC,QAAtDC,EADqB,EACrBA,kBAAmBC,EADE,EACFA,YAAaC,EADX,EACWA,YAQxC,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,WAAWQ,IAE7B,yBAAKR,UAAU,2BACb,4BAAKS,GACL,2BAAIC,IAEN,yBAAKV,UAAU,8BACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,yBACZ,kBAAC,IAAD,CAAMW,GAAE,yBAAoBH,IAC1B,uBAAGR,UAAU,6BAAb,qBAGJ,wBAAIA,UAAU,0BACZ,kBAAC,IAAD,CAAMW,GAAE,yBAAoBH,IAC1B,uBAAGR,UAAU,mBAAb,0BAGJ,wBAAIA,UAAU,yBAAyBY,QA7B7B,WAChBC,OAAOC,QAAP,0CAAkDL,EAAlD,QACFH,EAAMS,WA4BI,uBAAGf,UAAU,2BAAb,0BCvBDgB,EAVa,WAC1B,OACE,6BACE,kBAAC,IAAD,CAAML,GAAG,cAAcX,UAAU,uBAAjC,sBCGAiB,E,kLAEFC,KAAKZ,MAAMa,oB,+BAGH,IAAD,OACHC,EAAW,kBAACC,EAAA,EAAD,MAwBf,OAtBKH,KAAKZ,MAAMgB,UACdF,EACE,kBAAC,IAAMG,SAAP,KACE,wBAAIvB,UAAU,yBAAd,YACA,kBAAC,EAAD,MACA,6BACCkB,KAAKZ,MAAMc,SAASI,KAAI,SAAAjB,GAAO,OAC9B,kBAAC,EAAD,CACEkB,IAAKlB,EAAQmB,GACbnB,QAASA,EACTQ,OAAQ,kBACN,EAAKT,MAAMqB,gBACTpB,EAAQC,kBACR,EAAKF,MAAMsB,iBAUvB,yBAAK5B,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aAAaoB,U,GAlChBS,aA0DTC,uBAhBS,SAAAC,GACtB,MAAO,CACLX,SAAUW,EAAMxB,QAAQa,SACxBE,QAASS,EAAMxB,QAAQe,QACvBU,OAAQD,EAAMxB,QAAQyB,WAIC,SAAAC,GACzB,MAAO,CACLd,gBAAiB,kBAAMc,EAASC,QAChCP,gBAAiB,SAACnB,EAAmBoB,GAApB,OACfK,EAASC,IAAiC1B,EAAmBoB,QAIpDE,CAA6Cb","file":"static/js/5.bb80b1fb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport classes from './Spinner.module.css'\r\n\r\nconst spinner = () => (\r\n  <div className={classes.Loader}>Loading...</div>\r\n)\r\n\r\nexport default spinner","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1EvJU\",\"load2\":\"Spinner_load2__p2E34\"};","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ProjectItem = (props) => {\r\n  const { projectIdentifier, projectName, description } = props.project\r\n\r\n  const deleteProject = () => {\r\n    if (window.confirm(`Are you sure to delete project [${projectName}]?`)) {\r\n      props.delete()\r\n    }\r\n  }  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card card-body bg-light mb-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col-2\">\r\n            <span className=\"mx-auto\">{projectIdentifier}</span>\r\n          </div>\r\n          <div className=\"col-lg-6 col-md-4 col-8\">\r\n            <h3>{projectName}</h3>\r\n            <p>{description}</p>\r\n          </div>\r\n          <div className=\"col-md-4 d-none d-lg-block\">\r\n            <ul className=\"list-group\">\r\n              <li className=\"list-group-item board\">\r\n                <Link to={`/project-board/${projectIdentifier}`}>\r\n                  <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-group-item update\">\r\n                <Link to={`/updateProject/${projectIdentifier}`}>\r\n                  <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-group-item delete\" onClick={deleteProject}>\r\n                <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectItem\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CreateProjectButton = () => {\r\n  return (\r\n    <div>\r\n      <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\r\n        Create a Project\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateProjectButton\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as actions from '../store/actions'\r\nimport Spinner from '../components/UI/Spinner/Spinner'\r\n\r\nimport ProjectItem from '../components/Project/ProjectItem/ProjectItem'\r\nimport CreateProjectButton from '../components/UI/CustomButtons/CreateProjectButton'\r\n\r\nclass Dashboard extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchProjects()\r\n  }\r\n\r\n  render() {\r\n    let projects = <Spinner />\r\n\r\n    if (!this.props.loading) {\r\n      projects = (\r\n        <React.Fragment>\r\n          <h1 className=\"display-4 text-center\">Projects</h1>\r\n          <CreateProjectButton />\r\n          <hr />\r\n          {this.props.projects.map(project => (\r\n            <ProjectItem\r\n              key={project.id}\r\n              project={project}\r\n              delete={() =>\r\n                this.props.onDeleteProject(\r\n                  project.projectIdentifier,\r\n                  this.props.history\r\n                )\r\n              }\r\n            />\r\n          ))}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"projects\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">{projects}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    projects: state.project.projects,\r\n    loading: state.project.loading,\r\n    errors: state.project.errors,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchProjects: () => dispatch(actions.fetchProjects()),\r\n    onDeleteProject: (projectIdentifier, history) =>\r\n      dispatch(actions.deleteProjectByProjectId(projectIdentifier, history)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard)\r\n"],"sourceRoot":""}