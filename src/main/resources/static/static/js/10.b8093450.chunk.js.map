{"version":3,"sources":["container/Users/RegisterForm.js","components/UI/CustomInputs/Input.js"],"names":["connect","state","user","error","dispatch","onCreateUser","history","actions","props","enableReinitialize","initialValues","username","fullname","password","confirmpassword","validationSchema","Yup","email","required","min","oneOf","onSubmit","values","setSubmitting","formik","className","type","name","placeholder","disabled","isSubmitting","Input","label","useField","field","meta","htmlFor","id","classNames","touched"],"mappings":"qIAAA,mEA8FeA,uBAbS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAMC,KAAKA,KACjBC,MAAOF,EAAMC,KAAKC,UAIK,SAACC,GAC1B,MAAO,CACLC,aAAc,SAACH,EAAMI,GAAP,OAAmBF,EAASG,IAAsBL,EAAMI,QAI3DN,EAvFM,SAACQ,GACpB,OACE,kBAAC,IAAD,CACEC,oBAAoB,EACpBC,cAAe,CACbC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,gBAAiB,IAEnBC,iBAAkBC,IAAW,CAC3BL,SAAUK,MAAaC,QAAQC,SAAS,YACxCN,SAAUI,MAAaE,SAAS,YAChCL,SAAUG,MACPG,IAAI,EAAG,gCACPD,SAAS,YACZJ,gBAAiBE,MACdI,MAAM,CAACJ,IAAQ,YAAa,MAAO,6BACnCE,SAAS,cAEdG,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBf,EAAMH,aAAaiB,EAAQd,EAAMF,SACjCiB,GAAc,MAGf,SAAAC,GAAM,OACL,yBAAKC,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,yBAAd,WACA,uBAAGA,UAAU,oBAAb,uBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,QACLC,KAAK,WACLC,YAAY,gBACZzB,MAAOK,EAAML,MAAMQ,WAErB,kBAAC,IAAD,CACEe,KAAK,OACLC,KAAK,WACLC,YAAY,YACZzB,MAAOK,EAAML,MAAMS,WAErB,kBAAC,IAAD,CACEc,KAAK,WACLC,KAAK,WACLC,YAAY,WACZzB,MAAOK,EAAML,MAAMU,WAErB,kBAAC,IAAD,CACEa,KAAK,WACLC,KAAK,kBACLC,YAAY,mBACZzB,MAAOK,EAAML,MAAMW,kBAErB,4BACEY,KAAK,SACLD,UAAU,iCACVI,SAAUL,EAAOM,cAHnB,qB,6FCtCHC,IAtBD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAO7B,EAAsB,EAAtBA,MAAUK,EAAY,mCAGtByB,YAASzB,GAHa,mBAGrC0B,EAHqC,KAG9BC,EAH8B,KAK5C,OACE,yBAAKV,UAAU,cACZO,GAAS,2BAAOI,QAAS5B,EAAM6B,IAAM7B,EAAMmB,MAAOK,GACnD,yCACEP,UAAWa,IAAW,gCAAiC,CACrD,aAAcnC,GAASgC,EAAKhC,SAE1B+B,EACA1B,IAELL,GAAUgC,EAAKI,SAAWJ,EAAKhC,MAC9B,yBAAKsB,UAAU,oBAAoBtB,GAASgC,EAAKhC,OAC/C","file":"static/js/10.b8093450.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../../store/actions'\r\nimport Input from '../../components/UI/CustomInputs/Input'\r\n\r\nconst RegisterForm = (props) => {\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{\r\n        username: '',\r\n        fullname: '',\r\n        password: '',\r\n        confirmpassword: '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        username: Yup.string().email().required('Required'),\r\n        fullname: Yup.string().required('Required'),\r\n        password: Yup.string()\r\n          .min(6, 'Must be 6 characters or more')\r\n          .required('Required'),\r\n        confirmpassword: Yup.string()\r\n          .oneOf([Yup.ref(\"password\"), null], 'Both password must match.')\r\n          .required('Required')\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        props.onCreateUser(values, props.history)\r\n        setSubmitting(false)\r\n      }}\r\n    >\r\n      {formik => (\r\n        <div className=\"register\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 m-auto\">\r\n                <h1 className=\"display-4 text-center\">Sign Up</h1>\r\n                <p className=\"lead text-center\">Create Your Account</p>\r\n                <Form>\r\n                  <Input\r\n                    type=\"email\"\r\n                    name=\"username\"\r\n                    placeholder=\"Email Address\"\r\n                    error={props.error.username}\r\n                  />\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"fullname\"\r\n                    placeholder=\"Full Name\"\r\n                    error={props.error.fullname}\r\n                  />\r\n                  <Input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    error={props.error.password}\r\n                  />\r\n                  <Input\r\n                    type=\"password\"\r\n                    name=\"confirmpassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    error={props.error.confirmpassword}\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mt-4\"\r\n                    disabled={formik.isSubmitting}\r\n                  >\r\n                    LOGIN\r\n                  </button>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.user,\r\n    error: state.user.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onCreateUser: (user, history) => dispatch(actions.createNewUser(user, history))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterForm)\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { useField } from 'formik'\r\n\r\nconst Input = ({ label, error, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <input\r\n        className={classNames('form-control form-control-lg ', {\r\n          'is-invalid': error || meta.error,\r\n        })}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input"],"sourceRoot":""}