{"version":3,"sources":["components/UI/CustomInputs/Textarea.js","components/UI/CustomInputs/Select.js","container/CreateUpdateProjectTaskForm.js","components/UI/CustomInputs/Input.js"],"names":["Textarea","label","error","props","useField","field","meta","className","htmlFor","id","name","classNames","touched","Select","connect","state","task","backlog","project","dispatch","onCreateProjectTask","projectId","history","actions","onUpdateProjectTask","taskId","onFetchProjectTaskById","taskSequence","match","params","useEffect","undefined","isEmpty","to","enableReinitialize","initialValues","projectSequence","projectIdentifier","summary","acceptanceCriteria","dueDate","priority","status","validationSchema","Yup","max","required","oneOf","onSubmit","values","setSubmitting","formik","projectName","Input","type","placeholder","value","disabled","isSubmitting"],"mappings":"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","file":"static/js/8.64322e1a.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { useField } from 'formik'\r\n\r\nconst Textarea = ({ label, error, ...props }) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <textarea\r\n        className={classNames('form-control form-control-lg ', {\r\n          'is-invalid': error || meta.error,\r\n        })}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Textarea","import React from 'react';\r\nimport { useField } from 'formik'\r\n\r\nconst Select = ({ label, error, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <select className=\"form-control form-control-lg\" {...field} {...props} />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { useEffect } from 'react'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Formik, Form } from 'formik'\r\nimport { isEmpty } from 'lodash'\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../store/actions'\r\nimport Input from '../components/UI/CustomInputs/Input'\r\nimport Textarea from '../components/UI/CustomInputs/Textarea'\r\nimport Select from '../components/UI/CustomInputs/Select'\r\n\r\nconst CreateUpdateProjectTaskForm = props => {\r\n  const { projectId, taskId } = props.match.params\r\n\r\n  useEffect(() => {\r\n    if (taskId !== undefined) {\r\n      props.onFetchProjectTaskById(projectId, taskId)\r\n    }\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // check invalid path\r\n  if (isEmpty(props.project)) {\r\n    return <Redirect to={`/dashboard`} />\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{\r\n        id: props.task.id,\r\n        projectSequence: props.task.projectSequence,\r\n        projectIdentifier: props.task.projectIdentifier,\r\n        summary: props.task.summary || '',\r\n        acceptanceCriteria: props.task.acceptanceCriteria || '',\r\n        dueDate: props.task.dueDate || '',\r\n        priority: props.task.priority || '',\r\n        status: props.task.status || '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        summary: Yup.string()\r\n          .max(100, 'Must be 100 characters or less')\r\n          .required('Required'),\r\n        acceptanceCriteria: Yup.string(),\r\n        dueDate: Yup.date(),\r\n        priority: Yup.string()\r\n          .oneOf(['1', '2', '3']),\r\n        status: Yup.string()\r\n          .oneOf(['TODO', 'IN_PROGRESS', 'DONE']),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        if (values.id === undefined) {\r\n          props.onCreateProjectTask(projectId, values, props.history)\r\n        } else {\r\n          props.onUpdateProjectTask(projectId, taskId, values, props.history)\r\n        }\r\n        setSubmitting(false)\r\n      }}\r\n    >\r\n      { formik => (\r\n        <div className=\"add-PBI\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 m-auto\">\r\n                <Link to={`/project-board/${projectId}`} className=\"btn btn-light\">\r\n                  Back to Project Board\r\n                </Link>\r\n                <h4 className=\"display-4 text-center\">\r\n                  {taskId === undefined ? 'ADD ' : 'UPDATE '}Project Task\r\n                  <p className=\"lead text-center\">\r\n                    {props.project.projectName}\r\n                    {props.task.projectSequence && (' / ' + props.task.projectSequence)}\r\n                  </p>\r\n                </h4>\r\n                <Form>\r\n                  <Input \r\n                    error={props.error.summary} \r\n                    name=\"summary\"\r\n                    type=\"text\"\r\n                    placeholder=\"Project Task summary\"\r\n                  />\r\n                  <Textarea\r\n                    name=\"acceptanceCriteria\"\r\n                    placeholder=\"Acceptance Criteria\"\r\n                  />\r\n                  <Input label=\"Due Date\" name=\"dueDate\" type=\"date\" />\r\n                  <Select name=\"priority\">\r\n                    <option value=\"0\">Select Priority</option>\r\n                    <option value=\"1\">High</option>\r\n                    <option value=\"2\">Medium</option>\r\n                    <option value=\"3\">Low</option>\r\n                  </Select>\r\n                  <Select name=\"status\">\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"TODO\">TO DO</option>\r\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                    <option value=\"DONE\">DONE</option>\r\n                  </Select>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mt-4\"\r\n                    disabled={formik.isSubmitting}\r\n                  >\r\n                    {taskId !== undefined ? 'UPDATE' : 'CREATE'}\r\n                  </button>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    task: state.backlog.task,\r\n    project: state.project.project,\r\n    error: state.backlog.error,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProp = dispatch => {\r\n  return {\r\n    onCreateProjectTask: (projectId, task, history) => dispatch(actions.createProjectTask(projectId, task, history)),\r\n    onUpdateProjectTask: (projectId, taskId, task, history) => dispatch(actions.updateProjectTask(projectId, taskId, task, history)),\r\n    onFetchProjectTaskById: (projectId, taskSequence) => dispatch(actions.fetchProjectTaskById(projectId, taskSequence)),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProp\r\n)(CreateUpdateProjectTaskForm)\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { useField } from 'formik'\r\n\r\nconst Input = ({ label, error, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <input\r\n        className={classNames('form-control form-control-lg ', {\r\n          'is-invalid': error || meta.error,\r\n        })}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input"],"sourceRoot":""}