{"version":3,"sources":["container/Users/LoginForm.js","components/UI/CustomInputs/Input.js"],"names":["connect","state","user","isAuthenticated","error","dispatch","onTryLogin","actions","onClearLoginError","props","useEffect","isEmpty","alert","console","log","history","push","enableReinitialize","initialValues","username","password","validationSchema","Yup","email","required","min","onSubmit","values","setSubmitting","formik","className","type","name","placeholder","disabled","isSubmitting","Input","label","useField","field","meta","htmlFor","id","classNames","touched"],"mappings":"oIAAA,2EA6FeA,uBAfS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAMC,KAAKA,KACjBC,gBAAiBF,EAAMC,KAAKC,gBAC5BC,MAAOH,EAAMC,KAAKE,UAIK,SAACC,GAC1B,MAAO,CACLC,WAAY,SAACJ,GAAD,OAAUG,EAASE,IAAiBL,KAChDM,kBAAmB,kBAAMH,EAASE,WAIvBP,EArFG,SAACS,GAAW,IACpBL,EAA8CK,EAA9CL,MAAOI,EAAuCC,EAAvCD,kBAAmBL,EAAoBM,EAApBN,gBAiBlC,OAfAO,qBAAU,WACHC,kBAAQP,KACXQ,MAAM,kCACNJ,OAED,CAACJ,EAAOI,IAEXE,qBAAU,WACJP,IACFU,QAAQC,IAAI,mBAEZL,EAAMM,QAAQC,KAAK,iBAEpB,CAACb,EAAiBM,EAAMM,UAGzB,kBAAC,IAAD,CACEE,oBAAoB,EACpBC,cAAe,CACbC,SAAUf,EAAMe,UAAY,GAC5BC,SAAUhB,EAAMgB,UAAY,IAE9BC,iBAAkBC,IAAW,CAC3BH,SAAUG,MAAaC,QAAQC,SAAS,YACxCJ,SAAUE,MACPG,IAAI,EAAG,gCACPD,SAAS,cAEdE,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBnB,EAAMH,WAAWqB,GACjBC,GAAc,MAGf,SAAAC,GAAM,OACL,yBAAKC,UAAU,SACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,yBAAd,UACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,QACLC,KAAK,WACLC,YAAY,kBAEd,kBAAC,IAAD,CACEF,KAAK,WACLC,KAAK,WACLC,YAAY,aAEd,4BACEF,KAAK,SACLD,UAAU,iCACVI,SAAUL,EAAOM,cAHnB,qB,6FCnCHC,IAtBD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOjC,EAAsB,EAAtBA,MAAUK,EAAY,mCAGtB6B,YAAS7B,GAHa,mBAGrC8B,EAHqC,KAG9BC,EAH8B,KAK5C,OACE,yBAAKV,UAAU,cACZO,GAAS,2BAAOI,QAAShC,EAAMiC,IAAMjC,EAAMuB,MAAOK,GACnD,yCACEP,UAAWa,IAAW,gCAAiC,CACrD,aAAcvC,GAASoC,EAAKpC,SAE1BmC,EACA9B,IAELL,GAAUoC,EAAKI,SAAWJ,EAAKpC,MAC9B,yBAAK0B,UAAU,oBAAoB1B,GAASoC,EAAKpC,OAC/C","file":"static/js/9.87ae0725.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Formik, Form } from 'formik'\r\nimport { isEmpty } from 'lodash'\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../../store/actions'\r\nimport Input from '../../components/UI/CustomInputs/Input'\r\n\r\nconst LoginForm = (props) => {\r\n  const { error, onClearLoginError, isAuthenticated } = props\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(error)) {\r\n      alert('Invaild username and password!');\r\n      onClearLoginError();\r\n    }\r\n  }, [error, onClearLoginError])\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      console.log('isAuthenticated');\r\n      \r\n      props.history.push('/dashboard')\r\n    }\r\n  }, [isAuthenticated, props.history])\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{\r\n        username: error.username || '',\r\n        password: error.password || '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        username: Yup.string().email().required('Required'),\r\n        password: Yup.string()\r\n          .min(6, 'Must be 6 characters or more')\r\n          .required('Required'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        props.onTryLogin(values)\r\n        setSubmitting(false)\r\n      }}\r\n    >\r\n      {formik => (\r\n        <div className=\"login\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 m-auto\">\r\n                <h1 className=\"display-4 text-center\">Log In</h1>\r\n                <Form>\r\n                  <Input\r\n                    type=\"email\"\r\n                    name=\"username\"\r\n                    placeholder=\"Email Address\"\r\n                  />\r\n                  <Input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mt-4\"\r\n                    disabled={formik.isSubmitting}\r\n                  >\r\n                    LOGIN\r\n                  </button>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user.user,\r\n    isAuthenticated: state.user.isAuthenticated,\r\n    error: state.user.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onTryLogin: (user) => dispatch(actions.tryLogin(user)),\r\n    onClearLoginError: () => dispatch(actions.clearLoginError())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { useField } from 'formik'\r\n\r\nconst Input = ({ label, error, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <input\r\n        className={classNames('form-control form-control-lg ', {\r\n          'is-invalid': error || meta.error,\r\n        })}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input"],"sourceRoot":""}