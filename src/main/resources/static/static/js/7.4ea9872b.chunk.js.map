{"version":3,"sources":["components/UI/CustomInputs/Textarea.js","container/CreateUpdateProjectForm.js","components/UI/CustomInputs/Input.js"],"names":["Textarea","label","error","props","useField","field","meta","className","htmlFor","id","name","classNames","touched","connect","state","errors","project","isAuthenticated","user","dispatch","onCreateUpdateProject","history","actions","onFetchProjectByProjectId","projectIdentifier","match","params","useEffect","undefined","isEmpty","console","log","to","enableReinitialize","initialValues","projectName","description","startDate","endDate","validationSchema","Yup","max","required","min","onSubmit","values","setSubmitting","formik","type","placeholder","disabled","isSubmitting","Input"],"mappings":"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","file":"static/js/7.4ea9872b.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { useField } from 'formik'\r\n\r\nconst Textarea = ({ label, error, ...props }) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <textarea\r\n        className={classNames('form-control form-control-lg ', {\r\n          'is-invalid': error || meta.error,\r\n        })}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Textarea","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Formik, Form } from 'formik'\r\nimport { isEmpty } from 'lodash'\r\n\r\nimport Input from '../components/UI/CustomInputs/Input'\r\nimport Textarea from '../components/UI/CustomInputs/Textarea'\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../store/actions'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst CreateUpdateProjectForm = props => {\r\n  const { id } = props.match.params\r\n  useEffect(() => {\r\n    // in case of Update Project\r\n    if (id !== undefined) {\r\n      props.onFetchProjectByProjectId(id)\r\n    }\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // check invalid \r\n  if (!props.isAuthenticated || (id !== undefined && !isEmpty(props.errors))) {\r\n    console.log('redirect', props.isAuthenticated);\r\n    return(<Redirect to=\"/\" />)\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{\r\n        id: props.project.id,\r\n        projectName: props.project.projectName || '',\r\n        projectIdentifier: props.project.projectIdentifier || '',\r\n        description: props.project.description || '',\r\n        startDate: props.project.startDate || '',\r\n        endDate: props.project.endDate || '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        projectName: Yup.string()\r\n          .max(30, 'Must be 30 characters or less')\r\n          .required('Required'),\r\n        projectIdentifier: Yup.string()\r\n          .min(4, 'Must be 4 or 5 characters')\r\n          .max(5, 'Must be 4 or 5 characters')\r\n          .required('Required'),\r\n        description: Yup.string().required('Required'),\r\n        startDate: Yup.date(),\r\n        endDate: Yup.date(),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        props.onCreateUpdateProject(values, props.history)\r\n        setSubmitting(false)\r\n      }}\r\n    >\r\n      {formik => (\r\n        <div className=\"project\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 m-auto\">\r\n                <h5 className=\"display-4 text-center\">\r\n                  {id !== undefined ? 'Update ' : 'Create '}Project\r\n                </h5>\r\n                <hr />\r\n                <Form>\r\n                  <Input\r\n                    error={props.errors.projectName}\r\n                    name=\"projectName\"\r\n                    type=\"text\"\r\n                    placeholder=\"Project Name\"\r\n                  />\r\n                  <Input\r\n                    error={props.errors.projectIdentifier}\r\n                    name=\"projectIdentifier\"\r\n                    type=\"text\"\r\n                    placeholder=\"Project Identifier\"\r\n                    disabled={id !== undefined}\r\n                  />\r\n                  <Textarea\r\n                    error={props.errors.description}\r\n                    name=\"description\"\r\n                    type=\"text\"\r\n                    placeholder=\"description\"\r\n                  />\r\n                  <Input label=\"Start Date\" name=\"startDate\" type=\"date\" />\r\n                  <Input label=\"End Date\" name=\"endDate\" type=\"date\" />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mt-4\"\r\n                    disabled={formik.isSubmitting}\r\n                  >\r\n                    {id !== undefined ? 'UPDATE' : 'CREATE'}\r\n                  </button>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    errors: state.project.errors,\r\n    project: state.project.project,\r\n    isAuthenticated: state.user.isAuthenticated,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onCreateUpdateProject: (project, history) =>\r\n      dispatch(actions.createUpdateProject(project, history)),\r\n    onFetchProjectByProjectId: projectIdentifier =>\r\n      dispatch(actions.fetchProjectByProjectId(projectIdentifier)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateUpdateProjectForm)\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { useField } from 'formik'\r\n\r\nconst Input = ({ label, error, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {label && <label htmlFor={props.id || props.name}>{label}</label>}\r\n      <input\r\n        className={classNames('form-control form-control-lg ', {\r\n          'is-invalid': error || meta.error,\r\n        })}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {error || (meta.touched && meta.error) ? (\r\n        <div className=\"invalid-feedback\">{error || meta.error}</div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input"],"sourceRoot":""}