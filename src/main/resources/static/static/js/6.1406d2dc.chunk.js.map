{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/CustomButtons/CreateProjectTaskButton.js","components/Project/Tasks/Task/Task.js","components/Project/Tasks/CategoryTitle.js","components/Project/Tasks/Tasks.js","container/ProjectBoard.js"],"names":["spinner","className","classes","Loader","module","exports","CreateProjectTaskButton","props","to","projectId","Task","task","priority","projectSequence","summary","acceptanceCriteria","projectIdentifier","onClick","window","confirm","delete","CategoryTitle","color","title","connect","dispatch","onDeleteProjectTaskById","taskSequence","actions","tasks","map","key","id","ProjectBoard","this","match","params","undefined","onFetchProjectByProjectId","onFetchProjectTasks","projectTasks","Spinner","console","log","isAuthenticated","loading","isEmpty","error","tasksBoard","filter","isEqual","status","Fragment","projectNotFound","Component","state","backlog","project","user"],"mappings":"oIAAA,sCAQeA,IAJC,kBACd,yBAAKC,UAAWC,IAAQC,QAAxB,gB,oBCJFC,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,yB,oHCY5CC,EAViB,SAACC,GAC/B,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAE,0BAAqBD,EAAME,WAAaR,UAAU,wBACxD,uBAAGA,UAAU,sBAAb,2B,gBC6BOS,EAjCF,SAAAH,GACX,IAEQI,EAASJ,EAATI,KAQR,OACE,yBAAKV,UAAU,sBACb,yBAAKA,UAAS,iCAXI,CAAC,YAAa,uBAAwB,WAWAU,EAAKC,SAAW,KAAxE,OACOD,EAAKE,gBADZ,iBAZa,CAAC,OAAQ,SAAU,OAaoBF,EAAKC,SAAW,IAEpE,yBAAKX,UAAU,sBACb,wBAAIA,UAAU,cAAcU,EAAKG,SACjC,uBAAGb,UAAU,4BAA4BU,EAAKI,oBAC9C,kBAAC,IAAD,CACEP,GAAE,6BAAwBG,EAAKK,kBAA7B,YAAkDL,EAAKE,iBACzDZ,UAAU,mBAFZ,iBAMA,4BAAQA,UAAU,sBAAsBgB,QApBpB,WACpBC,OAAOC,QAAP,+CAAuDR,EAAKE,gBAA5D,QACFN,EAAMa,WAkBJ,aChBOC,EAVO,SAAAd,GACpB,OACE,yBAAKN,UAAU,yBACb,yBAAKA,UAAS,sBAAiBM,EAAMe,MAAvB,gBACZ,4BAAKf,EAAMgB,UC4BJC,cAAQ,MAPI,SAAAC,GACzB,MAAO,CACLC,wBAAyB,SAACjB,EAAWkB,GAAZ,OACvBF,EAASG,IAA8BnB,EAAWkB,QAIzCH,EA3BD,SAAAjB,GACZ,OACE,yBAAKN,UAAU,YACb,kBAAC,EAAD,CAAesB,MAAOhB,EAAMgB,MAAOD,MAAOf,EAAMe,QAC/Cf,EAAMsB,MAAMC,KAAI,SAAAnB,GAAI,OACnB,kBAAC,EAAD,CACEoB,IAAKpB,EAAKqB,GACVrB,KAAMA,EACNS,OAAQ,kBACNb,EAAMmB,wBACJf,EAAKK,kBACLL,EAAKE,2B,QCRboB,E,kLACiB,IACXxB,EAAcyB,KAAK3B,MAAM4B,MAAMC,OAA/B3B,eACU4B,IAAd5B,IACFyB,KAAK3B,MAAM+B,0BAA0B7B,GACrCyB,KAAK3B,MAAMgC,oBAAoB9B,M,+BAKjC,IAAI+B,EAAe,kBAACC,EAAA,EAAD,MAInB,GADAC,QAAQC,IAAI,QAAST,KAAK3B,QACrB2B,KAAK3B,MAAMqC,gBAEd,OADAF,QAAQC,IAAI,WAAYT,KAAK3B,MAAMqC,iBAC5B,kBAAC,IAAD,CAAUpC,GAAG,MAGtB,IAAK0B,KAAK3B,MAAMsC,QACd,GAAKC,kBAAQZ,KAAK3B,MAAMwC,OAMjB,CACL,IAAIC,EACF,yBAAK/C,UAAU,gCAAf,kCAIG6C,kBAAQZ,KAAK3B,MAAMsB,SACtBmB,EACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,CACEsB,MAAM,QACND,MAAM,eACNO,MAAOK,KAAK3B,MAAMsB,MAAMoB,QAAO,SAAAtC,GAAI,OACjCuC,kBAAQvC,EAAKwC,OAAQ,aAGzB,kBAAC,EAAD,CACE5B,MAAM,cACND,MAAM,aACNO,MAAOK,KAAK3B,MAAMsB,MAAMoB,QAAO,SAAAtC,GAAI,OACjCuC,kBAAQvC,EAAKwC,OAAQ,oBAGzB,kBAAC,EAAD,CACE5B,MAAM,OACND,MAAM,aACNO,MAAOK,KAAK3B,MAAMsB,MAAMoB,QAAO,SAAAtC,GAAI,OACjCuC,kBAAQvC,EAAKwC,OAAQ,eAM/BX,EACE,kBAAC,IAAMY,SAAP,KACE,kBAAC,EAAD,CACE3C,UAAWyB,KAAK3B,MAAM4B,MAAMC,OAAO3B,YAErC,6BACCuC,QA5CLR,EACE,yBAAKvC,UAAU,kCACZiC,KAAK3B,MAAMwC,MAAMM,iBA+C1B,OAAO,yBAAKpD,UAAU,aAAauC,O,GAtEZc,aA6FZ9B,uBAnBS,SAAA+B,GACtB,MAAO,CACL1B,MAAO0B,EAAMC,QAAQ3B,MACrB4B,QAASF,EAAME,QAAQA,QACvBZ,QAASU,EAAMC,QAAQX,QACvBE,MAAOQ,EAAMC,QAAQT,MACrBH,gBAAiBW,EAAMG,KAAKd,oBAIL,SAAAnB,GACzB,MAAO,CACLa,0BAA2B,SAAAtB,GAAiB,OAC1CS,EAASG,IAAgCZ,KAC3CuB,oBAAqB,SAAAvB,GAAiB,OACpCS,EAASG,IAA0BZ,QAI1BQ,CAA6CS","file":"static/js/6.1406d2dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport classes from './Spinner.module.css'\r\n\r\nconst spinner = () => (\r\n  <div className={classes.Loader}>Loading...</div>\r\n)\r\n\r\nexport default spinner","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1EvJU\",\"load2\":\"Spinner_load2__p2E34\"};","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CreateProjectTaskButton = (props) => {\r\n  return (\r\n    <div>\r\n      <Link to={`/addProjectTask/${props.projectId}`} className=\"btn btn-primary mb-3\">\r\n        <i className=\"fas fa-plus-circle\"> Create Project Task</i>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateProjectTaskButton","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Task = props => {\r\n  const priority = ['HIGH', 'MEDIUM', 'LOW']\r\n  const priorityClass = ['bg-danger', 'bg-warning text-dark', 'bg-info']\r\n  const { task } = props\r\n\r\n  const deleteProjectTask = () => {\r\n    if (window.confirm(`Are you sure to delete project task [${task.projectSequence}]?`)) {\r\n      props.delete()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card mb-1 bg-light\">\r\n      <div className={`card-header text-light ${priorityClass[task.priority - 1]}`}>\r\n        ID: {task.projectSequence} -- Priority: {priority[task.priority - 1]}\r\n      </div>\r\n      <div className=\"card-body bg-light\">\r\n        <h5 className=\"card-title\">{task.summary}</h5>\r\n        <p className=\"card-text text-truncate \">{task.acceptanceCriteria}</p>\r\n        <Link\r\n          to={`/updateProjectTask/${task.projectIdentifier}/${task.projectSequence}`}\r\n          className=\"btn btn-primary\"\r\n        >\r\n          View / Update\r\n        </Link>\r\n        <button className=\"btn btn-danger ml-4\" onClick={deleteProjectTask}>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react'\r\n\r\nconst CategoryTitle = props => {\r\n  return (\r\n    <div className=\"card text-center mb-2\">\r\n      <div className={`card-header ${props.color} text-white`}>\r\n        <h3>{props.title}</h3>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryTitle\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport Task from './Task/Task'\r\nimport CategoryTitle from './CategoryTitle'\r\nimport * as actions from '../../../store/actions'\r\n\r\nconst Tasks = props => {\r\n  return (\r\n    <div className=\"col-md-4\">\r\n      <CategoryTitle title={props.title} color={props.color} />\r\n      {props.tasks.map(task => (\r\n        <Task\r\n          key={task.id}\r\n          task={task}\r\n          delete={() =>\r\n            props.onDeleteProjectTaskById(\r\n              task.projectIdentifier,\r\n              task.projectSequence\r\n            )\r\n          }\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteProjectTaskById: (projectId, taskSequence) =>\r\n      dispatch(actions.deleteProjectTaskById(projectId, taskSequence)),\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Tasks)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport Spinner from '../components/UI/Spinner/Spinner'\r\nimport CreateProjectTaskButton from '../components/UI/CustomButtons/CreateProjectTaskButton'\r\nimport { isEqual, isEmpty } from 'lodash'\r\nimport * as actions from '../store/actions'\r\nimport Tasks from '../components/Project/Tasks/Tasks'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass ProjectBoard extends Component {\r\n  componentDidMount() {\r\n    const { projectId } = this.props.match.params\r\n    if (projectId !== undefined) {\r\n      this.props.onFetchProjectByProjectId(projectId)\r\n      this.props.onFetchProjectTasks(projectId)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projectTasks = <Spinner />\r\n\r\n    // check invalid \r\n    console.log('props', this.props);\r\n    if (!this.props.isAuthenticated) {\r\n      console.log('redirect', this.props.isAuthenticated);\r\n      return(<Redirect to=\"/\" />)\r\n    }\r\n\r\n    if (!this.props.loading) {\r\n      if (!isEmpty(this.props.error)) {\r\n        projectTasks = (\r\n          <div className=\"alert alert-danger text-center\">\r\n            {this.props.error.projectNotFound}\r\n          </div>\r\n        )\r\n      } else {\r\n        let tasksBoard = (\r\n          <div className=\"alert alert-info text-center\">\r\n            No Project Tasks on this board\r\n          </div>\r\n        )\r\n        if (!isEmpty(this.props.tasks)) {\r\n          tasksBoard = (\r\n            <div className=\"row\">\r\n              <Tasks\r\n                title=\"TO DO\"\r\n                color=\"bg-secondary\"\r\n                tasks={this.props.tasks.filter(task =>\r\n                  isEqual(task.status, 'TODO')\r\n                )}\r\n              />\r\n              <Tasks\r\n                title=\"In Progress\"\r\n                color=\"bg-primary\"\r\n                tasks={this.props.tasks.filter(task =>\r\n                  isEqual(task.status, 'IN_PROGRESS')\r\n                )}\r\n              />\r\n              <Tasks\r\n                title=\"Done\"\r\n                color=\"bg-success\"\r\n                tasks={this.props.tasks.filter(task =>\r\n                  isEqual(task.status, 'DONE')\r\n                )}\r\n              />\r\n            </div>\r\n          )\r\n        }\r\n        projectTasks = (\r\n          <React.Fragment>\r\n            <CreateProjectTaskButton\r\n              projectId={this.props.match.params.projectId}\r\n            />\r\n            <hr />\r\n            {tasksBoard}\r\n          </React.Fragment>\r\n        )\r\n      }\r\n    }\r\n    return <div className=\"container\">{projectTasks}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tasks: state.backlog.tasks,\r\n    project: state.project.project,\r\n    loading: state.backlog.loading,\r\n    error: state.backlog.error,\r\n    isAuthenticated: state.user.isAuthenticated\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchProjectByProjectId: projectIdentifier =>\r\n      dispatch(actions.fetchProjectByProjectId(projectIdentifier)),\r\n    onFetchProjectTasks: projectIdentifier =>\r\n      dispatch(actions.fetchProjectTasks(projectIdentifier)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectBoard)\r\n"],"sourceRoot":""}